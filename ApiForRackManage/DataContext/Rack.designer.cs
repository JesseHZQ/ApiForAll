#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ApiForRackManage.DataContext
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PNINOUT")]
	public partial class RackDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertRack_copy(Rack_copy instance);
    partial void UpdateRack_copy(Rack_copy instance);
    partial void DeleteRack_copy(Rack_copy instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertRack(Rack instance);
    partial void UpdateRack(Rack instance);
    partial void DeleteRack(Rack instance);
    #endregion
		
		public RackDataContext() : 
				base(global::ApiForRackManage.Properties.Settings.Default.PNINOUTConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RackDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RackDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RackDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RackDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Rack_copy> Rack_copy
		{
			get
			{
				return this.GetTable<Rack_copy>();
			}
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Rack> Rack
		{
			get
			{
				return this.GetTable<Rack>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rack_copy")]
	public partial class Rack_copy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _PN;
		
		private string _RackName;
		
		private System.Nullable<int> _ActualQTY;
		
		private System.Nullable<int> _Size;
		
		private string _SNView;
		
		private string _TimeView;
		
		private string _SlotView;
		
		private string _Command;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPNChanging(string value);
    partial void OnPNChanged();
    partial void OnRackNameChanging(string value);
    partial void OnRackNameChanged();
    partial void OnActualQTYChanging(System.Nullable<int> value);
    partial void OnActualQTYChanged();
    partial void OnSizeChanging(System.Nullable<int> value);
    partial void OnSizeChanged();
    partial void OnSNViewChanging(string value);
    partial void OnSNViewChanged();
    partial void OnTimeViewChanging(string value);
    partial void OnTimeViewChanged();
    partial void OnSlotViewChanging(string value);
    partial void OnSlotViewChanged();
    partial void OnCommandChanging(string value);
    partial void OnCommandChanged();
    #endregion
		
		public Rack_copy()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PN", DbType="NVarChar(50)")]
		public string PN
		{
			get
			{
				return this._PN;
			}
			set
			{
				if ((this._PN != value))
				{
					this.OnPNChanging(value);
					this.SendPropertyChanging();
					this._PN = value;
					this.SendPropertyChanged("PN");
					this.OnPNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RackName", DbType="NVarChar(50)")]
		public string RackName
		{
			get
			{
				return this._RackName;
			}
			set
			{
				if ((this._RackName != value))
				{
					this.OnRackNameChanging(value);
					this.SendPropertyChanging();
					this._RackName = value;
					this.SendPropertyChanged("RackName");
					this.OnRackNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualQTY", DbType="Int")]
		public System.Nullable<int> ActualQTY
		{
			get
			{
				return this._ActualQTY;
			}
			set
			{
				if ((this._ActualQTY != value))
				{
					this.OnActualQTYChanging(value);
					this.SendPropertyChanging();
					this._ActualQTY = value;
					this.SendPropertyChanged("ActualQTY");
					this.OnActualQTYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Int")]
		public System.Nullable<int> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SNView", DbType="NVarChar(555)")]
		public string SNView
		{
			get
			{
				return this._SNView;
			}
			set
			{
				if ((this._SNView != value))
				{
					this.OnSNViewChanging(value);
					this.SendPropertyChanging();
					this._SNView = value;
					this.SendPropertyChanged("SNView");
					this.OnSNViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeView", DbType="NVarChar(MAX)")]
		public string TimeView
		{
			get
			{
				return this._TimeView;
			}
			set
			{
				if ((this._TimeView != value))
				{
					this.OnTimeViewChanging(value);
					this.SendPropertyChanging();
					this._TimeView = value;
					this.SendPropertyChanged("TimeView");
					this.OnTimeViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlotView", DbType="NVarChar(555)")]
		public string SlotView
		{
			get
			{
				return this._SlotView;
			}
			set
			{
				if ((this._SlotView != value))
				{
					this.OnSlotViewChanging(value);
					this.SendPropertyChanging();
					this._SlotView = value;
					this.SendPropertyChanged("SlotView");
					this.OnSlotViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Command", DbType="NVarChar(555)")]
		public string Command
		{
			get
			{
				return this._Command;
			}
			set
			{
				if ((this._Command != value))
				{
					this.OnCommandChanging(value);
					this.SendPropertyChanging();
					this._Command = value;
					this.SendPropertyChanged("Command");
					this.OnCommandChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _PW;
		
		private int _LV;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPWChanging(string value);
    partial void OnPWChanged();
    partial void OnLVChanging(int value);
    partial void OnLVChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PW", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PW
		{
			get
			{
				return this._PW;
			}
			set
			{
				if ((this._PW != value))
				{
					this.OnPWChanging(value);
					this.SendPropertyChanging();
					this._PW = value;
					this.SendPropertyChanged("PW");
					this.OnPWChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LV", DbType="Int NOT NULL")]
		public int LV
		{
			get
			{
				return this._LV;
			}
			set
			{
				if ((this._LV != value))
				{
					this.OnLVChanging(value);
					this.SendPropertyChanging();
					this._LV = value;
					this.SendPropertyChanged("LV");
					this.OnLVChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rack")]
	public partial class Rack : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _PN;
		
		private string _RackName;
		
		private System.Nullable<int> _ActualQTY;
		
		private System.Nullable<int> _Size;
		
		private string _SNView;
		
		private string _TimeView;
		
		private string _SlotView;
		
		private string _Command;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPNChanging(string value);
    partial void OnPNChanged();
    partial void OnRackNameChanging(string value);
    partial void OnRackNameChanged();
    partial void OnActualQTYChanging(System.Nullable<int> value);
    partial void OnActualQTYChanged();
    partial void OnSizeChanging(System.Nullable<int> value);
    partial void OnSizeChanged();
    partial void OnSNViewChanging(string value);
    partial void OnSNViewChanged();
    partial void OnTimeViewChanging(string value);
    partial void OnTimeViewChanged();
    partial void OnSlotViewChanging(string value);
    partial void OnSlotViewChanged();
    partial void OnCommandChanging(string value);
    partial void OnCommandChanged();
    #endregion
		
		public Rack()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PN", DbType="NVarChar(50)")]
		public string PN
		{
			get
			{
				return this._PN;
			}
			set
			{
				if ((this._PN != value))
				{
					this.OnPNChanging(value);
					this.SendPropertyChanging();
					this._PN = value;
					this.SendPropertyChanged("PN");
					this.OnPNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RackName", DbType="NVarChar(50)")]
		public string RackName
		{
			get
			{
				return this._RackName;
			}
			set
			{
				if ((this._RackName != value))
				{
					this.OnRackNameChanging(value);
					this.SendPropertyChanging();
					this._RackName = value;
					this.SendPropertyChanged("RackName");
					this.OnRackNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualQTY", DbType="Int")]
		public System.Nullable<int> ActualQTY
		{
			get
			{
				return this._ActualQTY;
			}
			set
			{
				if ((this._ActualQTY != value))
				{
					this.OnActualQTYChanging(value);
					this.SendPropertyChanging();
					this._ActualQTY = value;
					this.SendPropertyChanged("ActualQTY");
					this.OnActualQTYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Int")]
		public System.Nullable<int> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SNView", DbType="NVarChar(555)")]
		public string SNView
		{
			get
			{
				return this._SNView;
			}
			set
			{
				if ((this._SNView != value))
				{
					this.OnSNViewChanging(value);
					this.SendPropertyChanging();
					this._SNView = value;
					this.SendPropertyChanged("SNView");
					this.OnSNViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeView", DbType="NVarChar(MAX)")]
		public string TimeView
		{
			get
			{
				return this._TimeView;
			}
			set
			{
				if ((this._TimeView != value))
				{
					this.OnTimeViewChanging(value);
					this.SendPropertyChanging();
					this._TimeView = value;
					this.SendPropertyChanged("TimeView");
					this.OnTimeViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlotView", DbType="NVarChar(555)")]
		public string SlotView
		{
			get
			{
				return this._SlotView;
			}
			set
			{
				if ((this._SlotView != value))
				{
					this.OnSlotViewChanging(value);
					this.SendPropertyChanging();
					this._SlotView = value;
					this.SendPropertyChanged("SlotView");
					this.OnSlotViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Command", DbType="NVarChar(555)")]
		public string Command
		{
			get
			{
				return this._Command;
			}
			set
			{
				if ((this._Command != value))
				{
					this.OnCommandChanging(value);
					this.SendPropertyChanging();
					this._Command = value;
					this.SendPropertyChanged("Command");
					this.OnCommandChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
